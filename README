User → kubernetes

  Deployments:
   1. Fields "nodeSelector" under "spec.template.spec" is set to a constant value of
        {"role":"slave"}
   2. For every Container object in "spec.template.spec.containers" array
      "resources.requests" is copied into "resources.limits"

Kubernetes → user

  For every returned kubernetes type the following redactions are performed:
   1. For every "metadata" object at every level of nesting, the fields
      "selfLink", "uid" and "resourceVersion" are removed.
      If those removals left the "metadata" object empty, it remains an empty
      object in the JSON structure.

  Deployments:
   1. nodeSelector mentioned above is removed.


HTTP endpoints:

 On error, all HTTP API endpoints return a non-2xx HTTP status code
 along with a JSON object, e.g.
   {"error":"description of the error"}

GET /api/v1/namespaces
   List all namespaces in kubernetes.
   Reponse body:
     https://kubernetes.io/docs/api-reference/v1.6/#namespacelist-v1-core

POST /api/v1/namespaces
   Query parameters:
      cpu - integer, milli-cpu.
      memory - integer, MiB.
   Response body:
     https://kubernetes.io/docs/api-reference/v1.6/#list-401

GET /api/v1/namespaces/:namespace
   [TODO: separate ResourceQuota to .../quota endpoint]
   Get a specific namespace and its resource quota.
   Response body:
     (example)
     {
         "kind": "List",
         "items": [
             {
                 "metadata": {
                     "name": "02005658-ed42-45b6-89cb-c2bd29783c4e",
                     "creationTimestamp": "2017-09-20T10:27:21Z"
                 },
                 "spec": {
                     "finalizers": [
                         "kubernetes"
                     ]
                 },
                 "status": {
                     "phase": "Active"
                 }
             },
             {
                 "metadata": {
                     "name": "quota",
                     "namespace": "02005658-ed42-45b6-89cb-c2bd29783c4e",
                     "creationTimestamp": "2017-09-20T10:27:21Z"
                 },
                 "spec": {
                     "hard": {
                         "limits.cpu": "300m",
                         "limits.memory": "256Mi",
                         "requests.cpu": "300m",
                         "requests.memory": "256Mi"
                     }
                 },
                 "status": {
                     "hard": {
                         "limits.cpu": "300m",
                         "limits.memory": "256Mi",
                         "requests.cpu": "300m",
                         "requests.memory": "256Mi"
                     },
                     "used": {
                         "limits.cpu": "100m",
                         "limits.memory": "250Mi",
                         "requests.cpu": "100m",
                         "requests.memory": "250Mi"
                     }
                 }
             }
         ]
     }

DELETE /api/v1/namespaces/:namespace
   Delete a specific namespace.
   On success: response body is empty, HTTP status code 204.

--

GET /api/v1/namespaces/:namespace/configmaps
   List ConfigMaps in a namespace.
   Response body:
     https://kubernetes.io/docs/api-reference/v1.6/#configmaplist-v1-core

POST /api/v1/namespaces/:namespace/configmaps
   Create a ConfigMap.

GET /api/v1/namespaces/:namespace/configmaps/:objname
   Get a specific ConfigMap.

DELETE /api/v1/namespaces/:namespace/configmaps/:objname
   Delete a specific ConfigMap.

--

GET /api/v1/namespaces/:namespace/deployments
   List deployments.

POST /api/v1/namespaces/:namespace/deployments
   Create a deployment.
   Request & response body:
     https://kubernetes.io/docs/api-reference/v1.6/#deployment-v1beta1-apps

GET /api/v1/namespaces/:namespace/deployments/:objname
   Response body:
     https://kubernetes.io/docs/api-reference/v1.6/#deployment-v1beta1-apps

     (example 1)
     {
         "metadata": {
     
         },
         "items": [
     
         ]
     }

     (example 2)
     {
         "metadata": {
             "name": "engine-ecks",
             "namespace": "02005658-ed42-45b6-89cb-c2bd29783c4e",
             "generation": 1,
             "creationTimestamp": "2017-09-27T16:07:06Z",
             "labels": {
                 "app": "nginx"
             },
             "annotations": {
                 "deployment.kubernetes.io/revision": "1"
             }
         },
         "spec": {
             "replicas": 8,
             "selector": {
                 "matchLabels": {
                     "app": "nginx"
                 }
             },
             "template": {
                 "metadata": {
                     "name": "engine-ecks-rs",
                     "creationTimestamp": null,
                     "labels": {
                         "app": "nginx"
                     }
                 },
                 "spec": {
                     "containers": [
                         {
                             "name": "engine-ecks-cont",
                             "image": "nginx",
                             "env": [
                                 {
                                     "name": "USER",
                                     "value": "urmom"
                                 }
                             ],
                             "resources": {
                                 "limits": {
                                     "cpu": "100m",
                                     "memory": "44Mi"
                                 },
                                 "requests": {
                                     "cpu": "100m",
                                     "memory": "44Mi"
                                 }
                             },
                             "terminationMessagePath": "/dev/termination-log",
                             "terminationMessagePolicy": "File",
                             "imagePullPolicy": "Always"
                         }
                     ],
                     "restartPolicy": "Always",
                     "terminationGracePeriodSeconds": 30,
                     "dnsPolicy": "ClusterFirst",
                     "securityContext": {
     
                     },
                     "schedulerName": "default-scheduler"
                 }
             },
             "strategy": {
                 "type": "RollingUpdate",
                 "rollingUpdate": {
                     "maxUnavailable": "25%",
                     "maxSurge": "25%"
                 }
             },
             "revisionHistoryLimit": 2,
             "progressDeadlineSeconds": 600
         },
         "status": {
             "observedGeneration": 1,
             "replicas": 3,
             "updatedReplicas": 3,
             "readyReplicas": 3,
             "availableReplicas": 3,
             "unavailableReplicas": 5,
             "conditions": [
                 {
                     "type": "Available",
                     "status": "False",
                     "lastUpdateTime": "2017-09-27T16:07:06Z",
                     "lastTransitionTime": "2017-09-27T16:07:06Z",
                     "reason": "MinimumReplicasUnavailable",
                     "message": "Deployment does not have minimum availability."
                 },
                 {
                     "type": "ReplicaFailure",
                     "status": "True",
                     "lastUpdateTime": "2017-09-27T16:07:06Z",
                     "lastTransitionTime": "2017-09-27T16:07:06Z",
                     "reason": "FailedCreate",
                     "message": "unable to create pods: pods \"engine-ecks-4269342446-\" is forbidden: exceeded quota: quota, requested: limits.cpu=100m,requests.cpu=100m, used: limits.cpu=300m,requests.cpu=300m, limited: limits.cpu=300m,requests.cpu=300m"
                 },
                 {
                     "type": "Progressing",
                     "status": "True",
                     "lastUpdateTime": "2017-09-27T16:07:22Z",
                     "lastTransitionTime": "2017-09-27T16:07:06Z",
                     "reason": "ReplicaSetUpdated",
                     "message": "ReplicaSet \"engine-ecks-4269342446\" is progressing."
                 }
             ]
         }
     }

DELETE /api/v1/namespaces/:namespace/deployments/:objname
   .

--

GET /api/v1/namespaces/:namespace/endpoints
   .

POST /api/v1/namespaces/:namespace/endpoints
   .

GET /api/v1/namespaces/:namespace/endpoints/:objname
   .

DELETE /api/v1/namespaces/:namespace/endpoints/:objname
   .

--

GET /api/v1/namespaces/:namespace/secrets
   .

POST /api/v1/namespaces/:namespace/secrets
   .

GET /api/v1/namespaces/:namespace/secrets/:objname
   .

DELETE /api/v1/namespaces/:namespace/secrets/:objname
   .

--

GET /api/v1/namespaces/:namespace/services
   List of services in a namespace.
   Response body:
     https://kubernetes.io/docs/api-reference/v1.6/#servicelist-v1-core

POST /api/v1/namespaces/:namespace/services
   Create a service in a namespace.
   Response body:
     https://kubernetes.io/docs/api-reference/v1.6/#service-v1-core

GET /api/v1/namespaces/:namespace/services/:objname
   Get a particular service by name "objname."
   Response body:
     https://kubernetes.io/docs/api-reference/v1.6/#service-v1-core

DELETE /api/v1/namespaces/:namespace/services/:objname
